{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zolo/harish/react/meetups-nextjs/pages/[meetupId]/index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { Fragment } from \"react\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nfunction Index(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetup.image,\n      title: props.meetup.title,\n      address: props.meetup.address,\n      description: props.meetup.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://harish:harish8249@cluster0.xacsm.mongodb.net/meetup?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetup');\n  const responseData = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  console.log(responseData);\n  return {\n    fallback: 'blocking',\n    paths: responseData.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  console.log('inside getStaticProps');\n  const id = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://harish:harish8249@cluster0.xacsm.mongodb.net/meetup?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupCollection = db.collection('meetup');\n  const responseData = await meetupCollection.findOne({\n    _id: ObjectId(id)\n  });\n  console.log(responseData);\n  return {\n    props: {\n      meetup: responseData\n    }\n  };\n}\nexport default Index;","map":{"version":3,"sources":["/Users/zolo/harish/react/meetups-nextjs/pages/[meetupId]/index.js"],"names":["MeetupDetail","Fragment","MongoClient","ObjectId","Index","props","meetup","image","title","address","description","getStaticPaths","client","connect","db","meetupCollection","collection","responseData","find","_id","toArray","close","console","log","fallback","paths","map","params","meetupId","toString","getStaticProps","context","id","findOne"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AAEA,SAASC,KAAT,CAAeC,KAAf,EACA;AACI,sBACI,QAAC,QAAD;AAAA,2BACI,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,KAAK,CAACC,MAAN,CAAaC,KAAlC;AAAyC,MAAA,KAAK,EAAEF,KAAK,CAACC,MAAN,CAAaE,KAA7D;AAAoE,MAAA,OAAO,EAAEH,KAAK,CAACC,MAAN,CAAaG,OAA1F;AAAmG,MAAA,WAAW,EAAEJ,KAAK,CAACC,MAAN,CAAaI;AAA7H;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;AAED,OAAO,eAAeC,cAAf,GACP;AACI,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,+FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,QAAd,CAAzB;AACA,QAAMC,YAAY,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,EAAyB;AAACC,IAAAA,GAAG,EAAC;AAAL,GAAzB,EAAkCC,OAAlC,EAA3B;AACAR,EAAAA,MAAM,CAACS,KAAP;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;AACA,SAAM;AACFO,IAAAA,QAAQ,EAAC,UADP;AAEFC,IAAAA,KAAK,EAAER,YAAY,CAACS,GAAb,CAAkBpB,MAAD,KAAW;AAC/BqB,MAAAA,MAAM,EAAC;AAACC,QAAAA,QAAQ,EAACtB,MAAM,CAACa,GAAP,CAAWU,QAAX;AAAV;AADwB,KAAX,CAAjB;AAFL,GAAN;AAMH;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EACP;AACIT,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,QAAMS,EAAE,GAAGD,OAAO,CAACJ,MAAR,CAAeC,QAA1B;AACA,QAAMhB,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,+FAApB,CAArB;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,QAAd,CAAzB;AACA,QAAMC,YAAY,GAAG,MAAMF,gBAAgB,CAACkB,OAAjB,CAAyB;AAACd,IAAAA,GAAG,EAAChB,QAAQ,CAAC6B,EAAD;AAAb,GAAzB,CAA3B;AACAV,EAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;AAEA,SAAM;AACFZ,IAAAA,KAAK,EAAC;AAACC,MAAAA,MAAM,EAACW;AAAR;AADJ,GAAN;AAGH;AAED,eAAeb,KAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { Fragment } from \"react\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nfunction Index(props)\n{\n    return(\n        <Fragment>\n            <MeetupDetail image={props.meetup.image} title={props.meetup.title} address={props.meetup.address} description={props.meetup.description}/>\n        </Fragment>\n    )\n}\n\nexport async function getStaticPaths()\n{\n    const client = await MongoClient.connect('mongodb+srv://harish:harish8249@cluster0.xacsm.mongodb.net/meetup?retryWrites=true&w=majority');\n    const db = client.db();\n    const meetupCollection = db.collection('meetup');\n    const responseData = await meetupCollection.find({},{_id:1}).toArray();\n    client.close();\n    console.log(responseData);\n    return{\n        fallback:'blocking',\n        paths: responseData.map((meetup)=>({\n            params:{meetupId:meetup._id.toString()},\n        }))\n    };\n}\n\nexport async function getStaticProps(context)\n{\n    console.log('inside getStaticProps');\n    const id = context.params.meetupId;\n    const client = await MongoClient.connect('mongodb+srv://harish:harish8249@cluster0.xacsm.mongodb.net/meetup?retryWrites=true&w=majority');\n    const db = client.db();\n    const meetupCollection = db.collection('meetup');\n    const responseData = await meetupCollection.findOne({_id:ObjectId(id)});\n    console.log(responseData);\n\n    return{\n        props:{meetup:responseData}\n    }\n}\n\nexport default Index;\n\n"]},"metadata":{},"sourceType":"module"}